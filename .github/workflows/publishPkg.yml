# This is a basic workflow that is manually triggered

name: Create Nuget Packages

on:
  workflow_dispatch:

jobs:

  build:
    environment: slStreamUtilsEvn
  
    strategy:
      matrix:
        configuration: [Release]
        dotnet-version: ['5.0.x' ]

    runs-on: windows-latest

    env:
      Solution_Name: slStreamUtils.sln
      Test_Project_Path: UnitTests\slStreamUtilsTest\slStreamUtilsTest.csproj

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ matrix.dotnet-version }}

    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2
        
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}    

    - name: Build 
      run: msbuild $env:Solution_Name /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}

    - name: Execute unit tests
      run: dotnet test

    - name: Base Publish NuGet
      uses: rohith/publish-nuget@v2
      with:
        PROJECT_FILE_PATH:  slStreamUtils\slStreamUtils.csproj
        TAG_COMMIT: true
        TAG_FORMAT: nuget_v*
        NUGET_KEY: ${{secrets.NUGET_API_KEY}}


    - name: Protobuf Publish NuGet
      uses: rohith/publish-nuget@v2
      with:
        PROJECT_FILE_PATH:  slStreamUtilsProtobuf\slStreamUtilsProtobuf.csproj
        TAG_COMMIT: true
        TAG_FORMAT: nuget_v*
        NUGET_KEY: ${{secrets.NUGET_API_KEY}}

    - name: MessagePack Publish NuGet
      uses: rohith/publish-nuget@v2
      with:
        PROJECT_FILE_PATH: slStreamUtilsMessagePack\slStreamUtilsMessagePack.csproj
        TAG_COMMIT: true
        TAG_FORMAT: nuget_v*
        NUGET_KEY: ${{secrets.NUGET_API_KEY}}
